---
- name: "Create {{ foreman_installer_katello_certs_dir }}"
  file:
    path: "{{ foreman_installer_katello_certs_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  delegate_to: "{{ item }}"
  with_items:
    - "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
    - "{{ inventory_hostname }}"

- name: Register proxy cert files stat
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-proxy-cert.cer"
    - "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-proxy-cert.key"
    - "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-proxy-cert.csr"
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
  register: certs_proxy_stat

- name: Write proxy custom CA certificate file
  copy:
    content: "{{ foreman_installer_katello_ca }}"
    dest: "{{ foreman_installer_katello_certs_dir }}/katello-ca-cert.pem"
    owner: root
    group: root
    mode: 0600
  register: ca_cert
  notify:
    - execute foreman-installer
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
  when: foreman_installer_katello_ca is defined

- name: Write proxy custom certificate file
  copy:
    content: "{{ foreman_installer_katello_proxy_cert }}"
    dest: "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-proxy-cert.cer"
    owner: root
    group: root
    mode: 0600
  register: custom_cert
  notify:
    - execute foreman-installer
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
  when: foreman_installer_katello_proxy_cert is defined

- name: Write proxy custom key certificate file
  copy:
    content: "{{ foreman_installer_katello_proxy_key }}"
    dest: "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-proxy-cert.key"
    owner: root
    group: root
    mode: 0600
  register: key_cert
  notify:
    - execute foreman-installer
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
  when: foreman_installer_katello_proxy_key is defined

- name: Write proxy custom CSR certificate file
  copy:
    content: "{{ foreman_installer_katello_proxy_csr }}"
    dest: "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-proxy-cert.csr"
    owner: root
    group: root
    mode: 0600
  register: csr_cert
  notify:
    - execute foreman-installer
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
  when: foreman_installer_katello_proxy_csr is defined

- name: 'set foreman_installer_update_certs_tar to True'
  set_fact:
    foreman_installer_update_certs_tar: True
    foreman_installer_update_certs: True
  when:
    - certs_proxy_stat.results[0].stat.exists or certs_proxy_stat.results[1].stat.exists or certs_proxy_stat.results[2].stat.exists
    - (ca_cert.changed | default(False)) or (custom_cert.changed | default(False)) or (key_cert.changed | default(False)) or (csr_cert.changed | default(False))
  tags:
    - skip_ansible_lint


- name: Register proxy cert tar stat
  stat:
    path: "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-certs.tar"
  register: proxy_cert_tar

- name: Generate Proxy Certs
  command: >
    {{ cert_generate_command }} --{{ cert_generate_fqdn_opt }} {{ ansible_fqdn }}
    --certs-tar {{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-certs.tar
    {{ ('--server-cert ' + foreman_installer_katello_certs_dir + '/' + ansible_nodename + '-proxy-cert.cer') if foreman_installer_katello_proxy_cert is defined else '' }}
    {{ ('--server-cert-req ' + foreman_installer_katello_certs_dir + '/' + ansible_nodename + '-proxy-cert.csr') if foreman_installer_katello_proxy_csr is defined else '' }}
    {{ ('--server-key ' + foreman_installer_katello_certs_dir + '/' + ansible_nodename + '-proxy-cert.key') if foreman_installer_katello_proxy_key is defined else '' }}
    {{ ('--server-ca-cert ' + foreman_installer_katello_certs_dir + '/katello-ca-cert.pem') if foreman_installer_katello_ca is defined else '' }}
    {{ (foreman_installer_update_certs_tar) | ternary('--certs-update-server', '') }}
  when: (ca_cert.changed | default(False)) or (custom_cert.changed | default(False)) or (key_cert.changed | default(False)) or (csr_cert.changed | default(False)) or proxy_cert_tar.stat.exists == False
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
  tags:
    - skip_ansible_lint

- name: Fetch certs-tar to localhost
  fetch:
    src: "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-certs.tar"
    dest: /var/tmp/
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"

- name: Copy certs tar to Proxy
  copy:
    src: "/var/tmp/{{ inventory_hostname + foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-certs.tar"
    dest: "{{ foreman_installer_katello_certs_dir }}/{{ ansible_nodename }}-certs.tar"
  notify:
    - write answers file
    - execute foreman-installer

- name: "Gather facts about {{ foreman_installer_generate_proxy_certs_from }}"
  setup:
  delegate_to: "{{ hostvars[foreman_installer_generate_proxy_certs_from].inventory_hostname }}"
  delegate_facts: True

- name: Include smart proxy certificate options in foreman_installer_scenarios_answers
  set_fact:
    foreman_installer_scenarios_answers: "{{ foreman_installer_scenarios_answers | combine( { certs_puppet_module: {'certs_tar': foreman_installer_katello_certs_dir + '/' + ansible_nodename + '-certs.tar', 'pulp_oauth_secret': hostvars[foreman_installer_generate_proxy_certs_from]['ansible_local']['foreman_installer'][hostvars[foreman_installer_generate_proxy_certs_from]['ansible_local']['foreman_installer'].last_scenario~'_answers']['katello']['oauth_secret'] }, 'foreman_proxy': { 'oauth_consumer_key': hostvars[foreman_installer_generate_proxy_certs_from]['ansible_local']['foreman_installer'][hostvars[foreman_installer_generate_proxy_certs_from]['ansible_local']['foreman_installer'].last_scenario~'_answers']['foreman']['oauth_consumer_key'], 'oauth_consumer_secret': hostvars[foreman_installer_generate_proxy_certs_from]['ansible_local']['foreman_installer'][hostvars[foreman_installer_generate_proxy_certs_from]['ansible_local']['foreman_installer'].last_scenario~'_answers']['foreman']['oauth_consumer_secret'] }  }, recursive=True ) }}"
